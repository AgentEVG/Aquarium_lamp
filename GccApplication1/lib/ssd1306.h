
//-------------------------------------------------<                  axlib v1.1                   >----------------------------------------------------
//-------------------------------------------------< Библиотека для работы с OLED дисплеем SSD1306 >----------------------------------------------------
//-------------------------------------------------<   Кузнецов Алексей 2015 http://www.avrki.ru   >----------------------------------------------------

#ifndef SSD1306_H_
#define SSD1306_H_

#if !defined(MAIN_INIT_H_)
#error "You must included (#include \"main_init.h\") befor use (#include <axlib/ssd1306.h>)."
#endif

//-------------------------------------------------------------------------
//						Объявление служебных псевдонимов
//-------------------------------------------------------------------------

#define SSD1306_OK			0
#define SSD1306_FAIL		1

#define SSD1306_DELAY()
#define SSD1306_SET			1
#define SSD1306_RESET		0

//-------------------------------------------------------------------------
//							Подключаемые библиотеки
//-------------------------------------------------------------------------

#include "type_var.h"
#include "i2c.h"
#include "font5x7.h"

//-------------------------------------------------------------------------
//							Объявление функций
//-------------------------------------------------------------------------

// Функция передачи команды
BYTE ssd1306_send_com(BYTE com);
// Функция передачи команды
BYTE ssd1306_send_data(BYTE data);
// Функция инициализации дисплея.
BYTE ssd1306_init(void);
// Функция установки позиции
void ssd1306_position(BYTE x, BYTE y);
// Функция очистки дисплея
void ssd1306_clear(void);
// Функция установки курсора
void ssd1306_goto_xy(BYTE x, BYTE y);
// Функция вывода символа
void ssd1306_putchar(BYTE chr);
//Функция вывода строки
void ssd1306_putstr(BYTE *str);
// Функция вывода своего символа
void ssd136_symbol(BYTE *arr, BYTE light);

//-------------------------------------------------------------------------
//	Функция передачи команды дисплею
//
//-------------------------------------------------------------------------

BYTE ssd1306_send_com(BYTE com)
{
	BYTE ask = ACK;
	
	i2c_start();
	ask = i2c_send_byte(SSD1306_ADD);
	ask = i2c_send_byte(0x00);
	ask = i2c_send_byte(com);
	ask = i2c_stop();
	
	return ask;
}

//-------------------------------------------------------------------------
//	Функция передачи данных дисплею
//
//-------------------------------------------------------------------------

BYTE ssd1306_send_data(BYTE data)
{
	BYTE ask = ACK;
	
	i2c_start();
	ask = i2c_send_byte(SSD1306_ADD);
	ask = i2c_send_byte(0x40);
	ask = i2c_send_byte(data);
	ask = i2c_stop();
	
	return ask;
}

//-------------------------------------------------------------------------
//	Функция иницциализирует дисплей. Возвращаемое значение указывает
//	на качество выпонения инициализации. При удаче вернет SSD1306_OK, при неудаче
//	вурнет ошибку SSD1306_FAIL.
//-------------------------------------------------------------------------

BYTE ssd1306_init(void)
{
	BYTE ask = ACK;
	i2c_init();
	
	_delay_ms(100);
	

ask = ssd1306_send_com(0xAE); // Выключить дисплей

ask = ssd1306_send_com(0xD5); // Настройка частоты обновления дисплея
ask = ssd1306_send_com(0x80);
///+----- делитель 0-F/ 0 - деление на 1
//+------ частота генератора. по умочанию 0x80
ask = ssd1306_send_com(0xA8); // Установить multiplex ratio
ask = ssd1306_send_com(0x3F); // 1/64 duty (значение по умолчанию), 0x1F - 128x32, 0x3F - 128x64   3f

ask = ssd1306_send_com(0xD3); // Смещение дисплея (offset)
ask = ssd1306_send_com(0xF0); // Нет смещения0xF1

ask = ssd1306_send_com(0x40); // Начала строки начала разверки 0x40 с начала RAM0x40

ask = ssd1306_send_com(0x8D); // Управление внутреним преобразователем
ask = ssd1306_send_com(0x14); // 0x10 - отключить (VCC подается извне) 0x14 - запустить внутрений DC/DC

ask = ssd1306_send_com(0x20); // Режим автоматической адресации
ask = ssd1306_send_com(0x00); // 0-по горизонтали с переходом на новую страницу (строку)
// 1 - по вертикали с переходом на новую строку
// 2 - только по выбранной странице без перехода

ask = ssd1306_send_com(0xA1); // Режим разверки по странице (по X)
// A1 - нормальный режим (слева/направо) A0 - обратный (справа/налево)

ask = ssd1306_send_com(0xC0); // Режим сканирования озу дисплея
// для изменения системы координат
// С0 - снизу/верх (начало нижний левый угол)
// С8 - сверху/вниз (начало верний левый угол)
ask = ssd1306_send_com(0xDA); // Аппаратная конфигурация COM
ask = ssd1306_send_com(0x02); // 0x02 - 128x32, 0x12 - 128x64    0x22

ask = ssd1306_send_com(0x81); // Установка яркости дисплея
ask = ssd1306_send_com(0x8F); // 0x8F..0xCF

ask = ssd1306_send_com(0xD9); // Настройка фаз DC/DC преоразователя
ask = ssd1306_send_com(0xF1); // 0x22 - VCC подается извне / 0xF1 для внутренего

ask = ssd1306_send_com(0xDB); // Установка уровня VcomH
ask = ssd1306_send_com(0x01); // Влияет на яркость дисплея 0x00..0x70

ask = ssd1306_send_com(0xA4); // Режим нормальный

ask = ssd1306_send_com(0xA6); // 0xA6 - нет инверсии, 0xA7 - инверсия дисплея

ask = ssd1306_send_com(0xAF);  // Дисплей включен

	ssd1306_clear();
	
	return ask;
}

//-------------------------------------------------------------------------
//	Функция установки позиции
//
//-------------------------------------------------------------------------

void ssd1306_position(BYTE x, BYTE y)
{
	if(y == 0) ssd1306_send_com(0xB1);
	if(y == 1) ssd1306_send_com(0xB0);
	if((y > 1) & (y <= 7))
	{
		ssd1306_send_com(0xB9 - y);
	}
	
	ssd1306_send_com(((x & 0xF0) >> 4) | 0x10);
	ssd1306_send_com((x & 0x0F) | 0x01); 
}

//-------------------------------------------------------------------------
// Функция очистки дисплея
//
//-------------------------------------------------------------------------

void ssd1306_clear(void)
{
	BYTE m,n;
	for(m=0;m<8;m++)
	{
		ssd1306_send_com(0xb0+m);
		ssd1306_send_com(0x00);		
		ssd1306_send_com(0x10);		
		for(n=0;n<128;n++)
		{
			ssd1306_send_data(0x00);
		}
	}
}

//-------------------------------------------------------------------------
//	Функция установки курсора
//
//-------------------------------------------------------------------------

void ssd1306_goto_xy(BYTE x, BYTE y)
{
	if(x > 21) x = 21;
	if(y > 3) y = 3;
	
	ssd1306_position((x*6), y);
}

//-------------------------------------------------------------------------
//	Функция вывода символа
//
//-------------------------------------------------------------------------

void ssd1306_putchar(BYTE chr)
{
	BYTE i;
	
	if(chr < 0x20) 
		{
			chr = 0x00;
		}
	else
		{
			chr -= 0x20;
		}
	
	for(i=0; i<5; i++)
		{
			ssd1306_send_data(pgm_read_byte(&(font6x8[(chr*5)+i])));
		}
		
	ssd1306_send_data(0x00);
}

//-------------------------------------------------------------------------
//	Функция вывода строки
//
//-------------------------------------------------------------------------

void ssd1306_putstr(BYTE *str)
{
	while(*str)
		{
			ssd1306_putchar(*str);
			str++;
		}
}

//-------------------------------------------------------------------------
//	Функция вывода своего символа
//
//-------------------------------------------------------------------------

void ssd136_symbol(BYTE *arr, BYTE light)
{
	BYTE i = 0;
	
	for(i=0; i<light; i++)
		{
			ssd1306_send_data(*arr);
			arr++;
		}
}

//-------------------------------------------------------------------------

void ssd1306_pix_xy(BYTE x, BYTE y, BYTE mode)
{
	BYTE data_page = y/8;
	BYTE data_pix = 0;
	
	if(mode == SSD1306_SET) 
		{
			data_pix |= (1 << (y%8));
		}
	
	ssd1306_position(x, data_page);
	ssd1306_send_data(data_pix);
}

#endif /* SSD1306_H_ */